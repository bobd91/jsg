/****
 *
 * ECMA-262    6th Editon, June 2015
 *
 * Modified so that it can be machine read
 *
 * Some productions have been rewritten to 
 * enforce static semantics directly in the grammar
 *
 * Instructions have been added to indicate where productions have to be reparsed
 *
 * Bob Davison
 *
 ****/

[syntactic goals Module or Script]

[lexical goals InputElementDiv
    or InputElementRegExp
    or InputElementTemplateTail
    or InputElementRegExpOrTemplateTail]

/*
 * 10 ECMAScript Language: Source Code
 */

/* 
 * 10.1 Source Text
 */

// Any Unicode code point
SourceCharacter ::
    <ANY>

/*
 * 11 ECMAScript Language: Lexical Grammar 
 */

// LineTerminatorSequence instead of LineTerminator
// for line counting support

InputElementDiv ::
    WhiteSpace
    LineTerminatorSequence
    Comment
    CommonToken
    DivPunctuator
    RightBracePunctuator

InputElementRegExp ::
    WhiteSpace
    LineTerminatorSequence
    Comment
    CommonToken
    RightBracePunctuator
    RegularExpressionLiteral

InputElementRegExpOrTemplateTail ::
    WhiteSpace
    LineTerminatorSequence
    Comment
    CommonToken
    RegularExpressionLiteral
    TemplateSubstitutionTail

InputElementTemplateTail ::
    WhiteSpace
    LineTerminatorSequence
    Comment
    CommonToken
    DivPunctuator
    TemplateSubstitutionTail 

/*
 * 11.1 Unicode Format-Control Characters 
 */

<ZWNJ> ::
    U+200C

<ZWJ> ::
    U+200D

<ZWNBSP> ::
    U+FEFF

/*
 *11.2 White Space
 */

<TAB> ::
    U+0009

<VT> ::
    U+000B

<FF> ::
    U+000C

<SP> ::
    U+0020

<NBSP> ::
    U+00A0

// <ZWNBSP> declared above

// <USP> built in abbreviation

WhiteSpace ::
    <TAB>
    <VT>
    <FF>
    <SP>
    <NBSP>
    <ZWNBSP>
    <USP> 

/*
 * 11.3 Line Terminators
 */

<LS> ::
    U+000A

<CR> ::
    U+000D

<LS> ::
    U+2028

<PS> ::
    U+2029

LineTerminator ::
    <LF>
    <CR>
    <LS>
    <PS>

// lookahead restriction on <CR> is redundant
// CRLF will always match <CR> <LF> due to longest match
LineTerminatorSequence ::
    <LF>
    <CR>
    <LS>
    <PS>
    <CR> <LF> 

/*
 * 11.4 Comments
 /

Comment ::
    MultiLineComment
    SingleLineComment

MultiLineComment ::
    /* MultiLineCommentChars[opt] */

// New production to support rewrite below
MultiLineCommentChars ::
    MultiLineCommentChar MultiLineCommentChars[opt]

// Explicit LineTerminatorSequence is required to support line counting
MultiLineCommentChar ::
    LineTerminatorSequence
    * [lookahead not /]
    SourceCharacter [but not one of * or LineTerminator]

SingleLineComment ::
    // SingleLineCommentChars[opt]

SingleLineCommentChars ::
    SingleLineCommentChar SingleLineCommentChars[opt]

SingleLineCommentChar ::
    SourceCharacter [but not LineTerminator]

/*
 * 11.5 Tokens
 */

CommonToken ::
    IdentifierName
    Punctuator
    NumericLiteral
    StringLiteral
    Template 

/*
 * 11.6 Names and Keywords
 /

IdentifierName ::
    IdentifierStart
    IdentifierName IdentifierPart

IdentifierStart ::
    UnicodeIDStart
    $
    _
    \ UnicodeEscapeSequence

IdentifierPart ::
    UnicodeIDContinue
    $
    _
    \ UnicodeEscapeSequence
    <ZWNJ>
    <ZWJ>

// Built in Unicode property lookups generated from UCD
UnicodeIDStart :: 
    <IDSTART>

UnicodeIDContinue :: 
    <IDCONTINUE>

/*
 *11.6.2 Reserved Words
 */

ReservedWord ::
    Keyword
    FutureReservedWord
    NullLiteral
    BooleanLiteral 

/*
 * 11.6.2.1 Keywords
 */

Keyword :: one of
    break       do         in          typeof
    case        else       instanceof  var
    catch       export     new         void
    class       extends    return      while
    const       finally    super       with
    continue    for        switch      yield
    debugger    function   this
    default     if         throw
    delete      import     try 

/*
 * 11.6.2.2 Future Reserved Words
 */

FutureReservedWord ::
    enum
    await [if syntactic goal Module] 

/*
 * 11.7 Punctuators
 */

Punctuator :: one of
    {       (       )       [       ]       .
    ...     ;       ,       <       >       <=
    >=      ==      !=      ===     !==
    +       -       *       %       ++      --
    <<      >>      >>>     &       |       ^
    !       ~       &&      ||      ?       :
    =       +=      -=      *=      %=      <<=
    >>=     >>>=    &=      |=      ^=      =>

DivPunctuator ::
    /
    /=

RightBracePunctuator ::
    } 

/*
 * 11.8 Literals
 */

/*
 * 11.8.1 Null Literals
 */

NullLiteral ::
    null

/*
 * 11.8.2 Boolean Literals
 */

BooleanLiteral ::
    true
    false

/*
 * 11.8.3 Numeric Literals
 */

NumericLiteral :: [after] [lookahead not in {DecimalDigit, IdentifierStart}]
    DecimalLiteral
    BinaryIntegerLiteral
    OctalIntegerLiteral
    HexIntegerLiteral

DecimalLiteral ::
    DecimalIntegerLiteral . DecimalDigits[opt] ExponentPart[opt]
    . DecimalDigits ExponentPart[opt]
    DecimalIntegerLiteral ExponentPart[opt] 

DecimalIntegerLiteral ::
    0
    NonZeroDigit DecimalDigits[opt]

DecimalDigits ::
    DecimalDigit
    DecimalDigits DecimalDigit

DecimalDigit :: one of
    0 1 2 3 4 5 6 7 8 9

NonZeroDigit :: one of
    1 2 3 4 5 6 7 8 9

ExponentPart ::
    ExponentIndicator SignedInteger

ExponentIndicator :: one of
    e E

SignedInteger ::
    DecimalDigits
    + DecimalDigits
    - DecimalDigits

BinaryIntegerLiteral ::
    0b BinaryDigits
    0B BinaryDigits

BinaryDigits ::
    BinaryDigit
    BinaryDigits BinaryDigit

BinaryDigit :: one of
    0 1

OctalIntegerLiteral ::
    0o OctalDigits
    0O OctalDigits

OctalDigits ::
    OctalDigit
    OctalDigits OctalDigit

OctalDigit :: one of
    0 1 2 3 4 5 6 7

HexIntegerLiteral ::
    0x HexDigits
    0X HexDigits

HexDigits ::
    HexDigit
    HexDigits HexDigit

HexDigit :: one of
    0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F 

/*
 * 11.8.4 String Literals
 */

StringLiteral ::
    " DoubleStringCharacters[opt] "
    ' SingleStringCharacters[opt] '

DoubleStringCharacters ::
    DoubleStringCharacter DoubleStringCharacters[opt]

SingleStringCharacters ::
    SingleStringCharacter SingleStringCharacters[opt]

DoubleStringCharacter ::
    SourceCharacter [but not one of " or \ or LineTerminator]
    \ EscapeSequence
    LineContinuation

SingleStringCharacter ::
    SourceCharacter [but not one of ' or \ or LineTerminator]
    \ EscapeSequence
    LineContinuation

LineContinuation ::
    \ LineTerminatorSequence

EscapeSequence ::
    CharacterEscapeSequence
    0 [lookahead not in DecimalDigit]
    HexEscapeSequence
    UnicodeEscapeSequence

CharacterEscapeSequence ::
    SingleEscapeCharacter
    NonEscapeCharacter

SingleEscapeCharacter :: one of
    ' " \ b f n r t v

NonEscapeCharacter ::
    SourceCharacter [but not one of EscapeCharacter or LineTerminator]

EscapeCharacter ::
    SingleEscapeCharacter
    DecimalDigit
    x
    u

HexEscapeSequence ::
    x HexDigit HexDigit

UnicodeEscapeSequence ::
    u Hex4Digits
    u{ HexDigits }

Hex4Digits ::
    HexDigit HexDigit HexDigit HexDigit 

/*
 * 11.8.5 Regular Expression Literals
 */


RegularExpressionLiteral ::
    / RegularExpressionBody / RegularExpressionFlags

RegularExpressionBody ::
    RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChars ::
    [empty]
    RegularExpressionChars RegularExpressionChar

RegularExpressionFirstChar ::
    RegularExpressionNonTerminator [but not one of * or \ or / or []
    RegularExpressionBackslashSequence
    RegularExpressionClass

RegularExpressionChar ::
    RegularExpressionNonTerminator [but not one of \ or / or []
    RegularExpressionBackslashSequence
    RegularExpressionClass

RegularExpressionBackslashSequence ::
    \ RegularExpressionNonTerminator

RegularExpressionNonTerminator ::
    SourceCharacter [but not LineTerminator]

RegularExpressionClass ::
    [ RegularExpressionClassChars ]

RegularExpressionClassChars ::
    [empty]
    RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionClassChar ::
    RegularExpressionNonTerminator [but not one of ] or \]
    RegularExpressionBackslashSequence

ReglarExpressionFlags ::
    [empty]
    RegularExpressionFlags RegularExpressionFlag

/*
 * 11.8.6 Template Literal Lexical Components
 */

Template ::
    NoSubstitutionTemplate
    TemplateHead

NoSubstitutionTemplate ::
    ` TemplateCharacters[opt] ` 
    
TemplateHead ::
    ` TemplateCharacters[opt] ${

TemplateSubstitutionTail ::
    TemplateMiddle
    TemplateTail

TemplateMiddle ::
    } TemplateCharacters[opt] ${

TemplateTail ::
    } TemplateCharacters[opt] `

TemplateCharacters ::
    TemplateCharacter TemplateCharacters[opt]

TemplateCharacter ::
    $ [lookahead not {]
    \ EscapeSequence
    LineContinuation
    LineTerminatorSequence
    SourceCharacter [but not one of ` or \ or $ or LineTerminator]



/*
 * 12 ECMAScript Language: Expressions
 */

/*
 * 12.1 Identifiers
 */

IdentifierReference[Yield] :
    Identifier
    [~Yield] yield

BindingIdentifier[Yield] :
    Identifier
    [~Yield] yield

LabelIdentifier[Yield] :
    Identifier
    [~Yield] yield

Identifier :
    IdentifierName [but not ReservedWord]

/*
 * 12.2 Primary Expression
 */

PrimaryExpression[Yield] : [lexical goal InputElementRegExp]
    this
    IdentifierReference[?Yield]
    Literal
    ArrayLiteral[?Yield]
    ObjectLiteral[?Yield]
    FunctionExpression
    ClassExpression[?Yield]
    GeneratorExpression
    RegularExpressionLiteral
    TemplateLiteral[?Yield]
    CoverParenthesizedExpressionAndArrowParameterList[?Yield] [reparse using ParenthesizedExpression[?Yield]]

CoverParenthesizedExpressionAndArrowParameterList[Yield] :
    ( Expression[In, ?Yield] )
    ( )
    ( ... BindingIdentifier[?Yield] )
    ( Expression[In, ?Yield] , ... BindingIdentifier[?Yield] ) 

ParenthesizedExpression[Yield] :
    ( Expression[In, ?Yield] ) 

/*
 * 12.2.4 Literals
 */

Literal :
    NullLiteral
    BooleanLiteral
    NumericLiteral
    StringLiteral 

/*
 * 12.2.5 Array Initializer
 */

ArrayLiteral[Yield] :
    [ Elision[opt] ]
    [ ElementList[?Yield] ]
    [ ElementList[?Yield] , Elision[opt] ]

ElementList[Yield] :
    Elision[opt] AssignmentExpression[In, ?Yield]
    Elision[opt] SpreadElement[?Yield]
    ElementList[?Yield] , Elision[opt] AssignmentExpression[In, ?Yield]
    ElementList[?Yield] , Elision[opt] SpreadElement[?Yield]

Elision :
    ,
    Elision ,

SpreadElement[Yield] :
    ... AssignmentExpression[In, ?Yield]
       
/*
 * 12.2.6 Object Initializer
 */

ObjectLiteral[Yield] :
    { }
    { PropertyDefinitionList[?Yield] }
    { PropertyDefinitionList[?Yield] , }

PropertyDefinitionList[Yield] :
    PropertyDefinition[?Yield]
    PropertyDefinitionList[?Yield] , PropertyDefinition[?Yield]

PropertyDefinition[Yield] :
    IdentifierReference[?Yield]
    CoverInitializedName[?Yield] [reparse or error]
    PropertyName[?Yield] : AssignmentExpression[In, ?Yield]
    MethodDefinition[?Yield]

PropertyName[Yield] :
    LiteralPropertyName
    ComputedPropertyName[?Yield]

LiteralPropertyName :
    IdentifierName
    StringLiteral
    NumericLiteral

ComputedPropertyName[Yield] :
    [ AssignmentExpression[In, ?Yield] ]

CoverInitializedName[Yield] :
    IdentifierReference[?Yield] Initializer[In, ?Yield]

Initializer[In, Yield] :
    = AssignmentExpression[?In, ?Yield]

/*
 * 12.2.9 Template Literals
 */

TemplateLiteral[Yield] :
    NoSubstitutionTemplate
    TemplateHead Expression[In, ?Yield] TemplateSpans[?Yield]

TemplateSpans[Yield] : [lexical goal InputElementTemplateTail]
    TemplateTail
    TemplateMiddleList[?Yield] TemplateTail

TemplateMiddleList[Yield] : [lexical goal InputElementTemplateTail]
    TemplateMiddle Expression[In, ?Yield]
    TemplateMiddleList[?Yield] TemplateMiddle Expression[In, ?Yield]

/*
 * 12.3 Left-Hand Side Expressions
 */

MemberExpression [Yield] :
    PrimaryExpression[?Yield]
    MemberExpression[?Yield] [ Expression [In, ?Yield] ]
    MemberExpression[?Yield] . IdentifierName
    MemberExpression[?Yield] TemplateLiteral[?Yield]
    SuperProperty[?Yield]
    MetaProperty
    new MemberExpression[?Yield] Arguments[?Yield] 

SuperProperty [Yield] :
    super [ Expression[In, ?Yield] ]
    super . IdentifierName

MetaProperty :
    NewTarget

NewTarget :
    new . target 

NewExpression[Yield] :
    MemberExpression[?Yield]
    new NewExpression[?Yield] 

CallExpression[Yield] :
    MemberExpression[?Yield] Arguments[?Yield]
    SuperCall[?Yield]
    CallExpression[?Yield] Arguments[?Yield]
    CallExpression[?Yield] [ Expression[In, ?Yield] ]
    CallExpression[?Yield] . IdentifierName
    CallExpression[?Yield] TemplateLiteral[?Yield] 

SuperCall[Yield] :
    super Arguments[?Yield]

Arguments[Yield] : 
    ( ) 
    ( ArgumentList[?Yield] ) 

ArgumentList[Yield] :
    AssignmentExpression[In, ?Yield]
    ... AssignmentExpression[In, ?Yield]
    ArgumentList[?Yield] , AssignmentExpression[In, ?Yield]
    ArgumentList[?Yield] , ... AssignmentExpression[In, ?Yield] 

LeftHandSideExpression[Yield] :
    NewExpression[?Yield]
    CallExpression[?Yield] 

/*
 * 12.4 Postfix Expressions
 */

PostfixExpression[Yield] :
    LeftHandSideExpression[?Yield]
    LeftHandSideExpression[?Yield] [no LineTerminator here] ++
    LeftHandSideExpression[?Yield] [no LineTerminator here] -- 

/*
 * 12.5 Unary Operators
 */

UnaryExpression[Yield] :
    PostfixExpression[?Yield]
    delete UnaryExpression[?Yield]
    void UnaryExpression[?Yield]
    typeof UnaryExpression[?Yield]
    ++ UnaryExpression[?Yield]
    -- UnaryExpression[?Yield]
    + UnaryExpression[?Yield]
    - UnaryExpression[?Yield]
    ~ UnaryExpression[?Yield]
    ! UnaryExpression[?Yield]

/*
 * 12.6 Multiplicative Operators
 */

MultiplicativeExpression[Yield] :
    UnaryExpression[?Yield]
    MultiplicativeExpression[?Yield] MultiplicativeOperator UnaryExpression[?Yield]

MultiplicativeOperator : one of
    * / %

/*
 * 12.7 Additive Operators
 */

AdditiveExpression[Yield] :
    MultiplicativeExpression[?Yield]
    AdditiveExpression[?Yield] + MultiplicativeExpression[?Yield]
    AdditiveExpression[?Yield] - MultiplicativeExpression[?Yield]
    
/*
 * 12.8 Bitwise Shift Operators
 */

ShiftExpression[Yield] :
    AdditiveExpression[?Yield]
    ShiftExpression[?Yield] << AdditiveExpression[?Yield]
    ShiftExpression[?Yield] >> AdditiveExpression[?Yield]
    ShiftExpression[?Yield] >>> AdditiveExpression[?Yield]

/*
 * 12.9 Relational Operators
 */

RelationalExpression[In, Yield] :
    ShiftExpression[?Yield]
    RelationalExpression[?In, ?Yield] < ShiftExpression[?Yield]
    RelationalExpression[?In, ?Yield] > ShiftExpression[?Yield]
    RelationalExpression[?In, ?Yield] <= ShiftExpression[? Yield]
    RelationalExpression[?In, ?Yield] >= ShiftExpression[?Yield]
    RelationalExpression[?In, ?Yield] instanceof ShiftExpression[?Yield]
    [+In] RelationalExpression[In, ?Yield] in ShiftExpression[?Yield]
           
/*
 * 12.10 Equality Operators
 */

EqualityExpression[In, Yield] :
    RelationalExpression[?In, ?Yield]
    EqualityExpression[?In, ?Yield] == RelationalExpression[?In, ?Yield]
    EqualityExpression[?In, ?Yield] != RelationalExpression[?In, ?Yield]
    EqualityExpression[?In, ?Yield] === RelationalExpression[?In, ?Yield]
    EqualityExpression[?In, ?Yield] !== RelationalExpression[?In, ?Yield]

/*
 * 12.11 Binary Bitwise Operators
 */

BitwiseANDExpression[In, Yield] :
    EqualityExpression[?In, ?Yield]
    BitwiseANDExpression[?In, ?Yield] & EqualityExpression[?In, ?Yield]

BitwiseXORExpression[In, Yield] :
    BitwiseANDExpression[?In, ?Yield]
    BitwiseXORExpression[?In, ?Yield] ^ BitwiseANDExpression[?In, ?Yield]

BitwiseORExpression[In, Yield] :
    BitwiseXORExpression[?In, ?Yield]
    BitwiseORExpression[?In, ?Yield] | BitwiseXORExpression[?In, ?Yield]

/*
 * 12.12 Binary Logical Operators
 */

LogicalANDExpression[In, Yield] :
    BitwiseORExpression[?In, ?Yield]
    LogicalANDExpression[?In, ?Yield] && BitwiseORExpression[?In, ?Yield]

LogicalORExpression[In, Yield] :
    LogicalANDExpression[?In, ?Yield]
    LogicalORExpression[?In, ?Yield] || LogicalANDExpression[?In, ?Yield]

/*
 * 12.13 Conditional Operator ( ? : )
 */

ConditionalExpression[In, Yield] :
 LogicalORExpression[?In, ?Yield]
 LogicalORExpression[?In,?Yield] ? AssignmentExpression[In, ?Yield] : AssignmentExpression[?In, ?Yield]
   
/*
 * 12.14 Assignment Operators
 */

AssignmentExpression[In, Yield] :
 ConditionalExpression[?In, ?Yield]
 [+Yield] YieldExpression[?In]
 ArrowFunction[?In, ?Yield]
 LeftHandSideExpression[?Yield] [but not one of ObjectLiteral[?Yield] or ArrayLiteral[?Yield]] = AssignmentExpression[?In, ?Yield]
 ObjectLiteral[?Yield] = AssignmentExpression[?In, ?Yield] [reparse $1 using AssignmentPattern[?Yield]]
 ArrayLiteral[?Yield] = AssignmentExpression[?In, ?Yield] [reparse $1 using AssignmentPattern[?Yield]]
 LeftHandSideExpression[?Yield] AssignmentOperator AssignmentExpression[?In, ?Yield]

AssignmentOperator : one of
  *= /= %= += -= <<= >>= >>>= &= ^= |= 

/*
 * 12.14.5 Destructuring Assignment
 */

AssignmentPattern[Yield] :
    ObjectAssignmentPattern[?Yield]
    ArrayAssignmentPattern[?Yield]

ObjectAssignmentPattern[Yield] :
    { }
    { AssignmentPropertyList[?Yield] }
    { AssignmentPropertyList[?Yield] , }

ArrayAssignmentPattern[Yield] :
    [ Elision[opt] AssignmentRestElement[?Yield][opt] ]
    [ AssignmentElementList[?Yield] ]
    [ AssignmentElementList[?Yield] , Elision[opt] AssignmentRestElement[?Yield][opt] ]

AssignmentPropertyList[Yield] :
    AssignmentProperty[?Yield]
    AssignmentPropertyList[?Yield] , AssignmentProperty[?Yield]

AssignmentElementList[Yield] :
    AssignmentElisionElement[?Yield]
    AssignmentElementList[?Yield] , AssignmentElisionElement[?Yield]

AssignmentElisionElement[Yield] :
    Elision[opt] AssignmentElement[?Yield]
    
AssignmentProperty[Yield] :
    IdentifierReference[?Yield] Initializer[In,?Yield][opt]
    PropertyName : AssignmentElement[?Yield]

AssignmentElement[Yield] :
    DestructuringAssignmentTarget[?Yield] Initializer[In,?Yield][opt]

AssignmentRestElement[Yield] :
    ... DestructuringAssignmentTarget[?Yield]

DestructuringAssignmentTarget[Yield] :
    LeftHandSideExpression[?Yield] [but not one of ObjectLiteral[?Yield] or ArrayLiteral[?Yield]]
    ObjectLiteral[?Yield] [reparse using AssignmentPattern[?Yield]]
    ArrayLiteral[?Yield] [reparse using AssignmentPattern[?Yield]]


/*
 * 12.15 Comma Operator ( , )
 */

Expression[In, Yield] :
    AssignmentExpression[?In, ?Yield]
    Expression[?In, ?Yield] , AssignmentExpression[?In, ?Yield]

/*
 * 13 ECMAScript Language: Statements and Declarations
 */

Statement[Yield, Return] :
    BlockStatement[?Yield, ?Return]
    VariableStatement[?Yield]
    EmptyStatement
    ExpressionStatement[?Yield]
    IfStatement[?Yield, ?Return]
    BreakableStatement[?Yield, ?Return]
    ContinueStatement[?Yield]
    BreakStatement[?Yield]
    [+Return] ReturnStatement[?Yield]
    WithStatement[?Yield, ?Return]
    LabelledStatement[?Yield, ?Return]
    ThrowStatement[?Yield]
    TryStatement[?Yield, ?Return]
    DebuggerStatement 

Declaration[Yield] :
    HoistableDeclaration[?Yield]
    ClassDeclaration[?Yield]
    LexicalDeclaration[In, ?Yield] 
             
HoistableDeclaration[Yield, Default] :
    FunctionDeclaration[?Yield, ?Default]
    GeneratorDeclaration[?Yield, ?Default] 

BreakableStatement[Yield, Return] :
    IterationStatement[?Yield, ?Return]
    SwitchStatement[?Yield, ?Return]
  
/*
 * 13.2 Block
 */

BlockStatement[Yield, Return] :
    Block[?Yield, ?Return]

Block[Yield, Return] :
    { StatementList[?Yield, ?Return][opt] }

StatementList[Yield, Return] :
    StatementListItem[?Yield, ?Return]
    StatementList[?Yield, ?Return] StatementListItem[?Yield, ?Return]

StatementListItem[Yield, Return] :
     Statement[?Yield, ?Return]
     Declaration[?Yield]

/*
 * 13.3 Declarations and the Variable Statement
 */

/*
 * 13.3.1 Let and Const Declarations
 */

// Modified to ease enforcement of const initialization
LexicalDeclaration[In, Yield] :
    let BindingList[?In, ?Yield] ;
    const BindingList[?In, ?Yield, Const] ;

// Still required elsewhere
LetOrConst :
    let
    const

BindingList[In, Yield, Const] :
    LexicalBinding[?In, ?Yield, ?Const]
    BindingList[?In, ?Yield] , LexicalBinding[?In, ?Yield, ?Const]

LexicalBinding[In, Yield, Const] :
    [~Const] BindingIdentifier[?Yield] Initializer[?In, ?Yield][opt]
    [+Const] BindingIdentifier[?Yield] Initializer[?In, ?Yield] 
    BindingPattern[?Yield] Initializer[?In, ?Yield]

/*
 * 13.3.2 Variable Statement
 */

VariableStatement[Yield] :
    var VariableDeclarationList[In, ?Yield] ;

VariableDeclarationList[In, Yield] :
    VariableDeclaration[?In, ?Yield]
    VariableDeclarationList[?In, ?Yield] , VariableDeclaration[?In, ?Yield]

VariableDeclaration[In, Yield] :
    BindingIdentifier[?Yield] Initializer[?In, ?Yield][opt]
    BindingPattern[?Yield] Initializer[?In, ?Yield]
        
/*
 * 13.3.3 Destructuring Binding Patterns
 */

BindingPattern[Yield] :
    ObjectBindingPattern[?Yield]
    ArrayBindingPattern[?Yield]

ObjectBindingPattern[Yield] :
    { }
    { BindingPropertyList[?Yield] }
    { BindingPropertyList[?Yield] , } 

ArrayBindingPattern[Yield] :
    [ Elision[opt] BindingRestElement[?Yield][opt] ]
    [ BindingElementList[?Yield] ]
    [ BindingElementList[?Yield] , Elision[opt] BindingRestElement[?Yield][opt] ]

BindingPropertyList[Yield] :
    BindingProperty[?Yield]
    BindingPropertyList[?Yield] , BindingProperty[?Yield]

BindingElementList[Yield] :
    BindingElisionElement[?Yield]
    BindingElementList[?Yield] , BindingElisionElement[?Yield]

BindingElisionElement[Yield] :
    Elision[opt] BindingElement[?Yield]

BindingProperty[Yield] :
    SingleNameBinding[?Yield]
    PropertyName[?Yield] : BindingElement[?Yield]

BindingElement[Yield ] :
    SingleNameBinding[?Yield]
    BindingPattern[?Yield] Initializer[In, ?Yield][opt] 

SingleNameBinding[Yield] :
    BindingIdentifier[?Yield] Initializer[In, ?Yield][opt]

BindingRestElement[Yield] :
    ... BindingIdentifier[?Yield]

/*
 * 13.4 Empty Statement
 */

EmptyStatement :
    ; 

/*
 * 13.5 Expression Statement
 */

ExpressionStatement[Yield] :
    [lookahead not in {{, function, class, let [ }] Expression[In, ?Yield] ; 

/*
 * 13.6 The if Statement
 */

IfStatement[Yield, Return] :
    if ( Expression[In, ?Yield]) Statement[?Yield, ?Return] else Statement[?Yield, ?Return]
    if ( Expression[In, ?Yield]) Statement[?Yield, ?Return]

/*
 * 13.7 Iteration Statements
 */

IterationStatement[Yield, Return] :
    do Statement[?Yield, ?Return] while ( Expression[In, ?Yield] ) ;
    while ( Expression[In, ?Yield] ) Statement[?Yield, ?Return]
    for ( [lookahead not in {let [ }] Expression[?Yield][opt] ; Expression[In, ?Yield][opt] ; Expression[In, ?Yield][opt] ) Statement[?Yield, ?Return]
    for ( var VariableDeclarationList[?Yield]; Expression[In, ?Yield][opt] ; Expression[In, ?Yield][opt] ) Statement[?Yield, ?Return]
    for ( LexicalDeclaration[?Yield] Expression[In, ?Yield][opt] ; Expression[In, ?Yield][opt]) Statement[?Yield, ?Return]
    for ( [lookahead not in {let [ }] LeftHandSideExpression[?Yield] in Expression[In, ?Yield] ) Statement[?Yield, ?Return]
    for ( var ForBinding[?Yield] in Expression[In, ?Yield] ) Statement[?Yield, ?Return]
    for ( ForDeclaration[?Yield] in Expression[In, ?Yield] ) Statement[?Yield, ?Return]
    for ( [lookahead not let] LeftHandSideExpression[?Yield] of AssignmentExpression[In, ?Yield] ) Statement[?Yield, ?Return]
    for ( var ForBinding[?Yield] of AssignmentExpression[In, ?Yield] ) Statement[?Yield, ?Return]
    for ( ForDeclaration[?Yield] of AssignmentExpression[In, ?Yield] ) Statement[?Yield, ?Return]

ForDeclaration[Yield] :
    LetOrConst ForBinding[?Yield]

ForBinding[Yield] :
    BindingIdentifier[?Yield]
    BindingPattern[?Yield] 

/*
 * 13.8 The continue Statement
 */

ContinueStatement[Yield] :
    continue ;
    continue [no LineTerminator here] LabelIdentifier[?Yield] ; 

/*
 * 13.9 The break Statement
 */

BreakStatement[Yield] :
    break ;
    break [no LineTerminator here] LabelIdentifier[?Yield] ;

/*
 * 13.10 The return Statement
 */

ReturnStatement[Yield] :
    return ;
    return [no LineTerminator here] Expression[In, ?Yield] ; 

/*
 * 13.11 The with Statement
 */

WithStatement[Yield, Return] :
    with ( Expression[In, ?Yield]) Statement[?Yield, ?Return]
   
/*
 * 13.12 The switch Statement
 */

SwitchStatement[Yield, Return] :
    switch ( Expression[In, ?Yield]) CaseBlock[?Yield, ?Return]

CaseBlock[Yield, Return] :
    { CaseClauses[?Yield, ?Return][opt] }
    { CaseClauses[?Yield, ?Return][opt] DefaultClause[?Yield, ?Return] CaseClauses[?Yield, ?Return][opt] }

CaseClauses[Yield, Return] :
    CaseClause[?Yield, ?Return]
    CaseClauses[?Yield, ?Return] CaseClause[?Yield, ?Return]

CaseClause[Yield, Return] :
    case Expression[In, ?Yield] : StatementList[?Yield, ?Return][opt]

DefaultClause[Yield, Return] :
    default : StatementList[?Yield, ?Return][opt] 

/*
 * 13.13 Labelled Statements
 */

LabelledStatement[Yield, Return] :
    LabelIdentifier[?Yield] : LabelledItem[?Yield, ?Return]

LabelledItem[Yield, Return] :
    Statement[?Yield, ?Return]
    FunctionDeclaration[?Yield]

/*
 * 13.14 The throw Statement
 */

ThrowStatement[Yield] :
    throw [no LineTerminator here] Expression[In, ?Yield] ; 
   

/*
 * 13.15 The try Statement
 */

TryStatement[Yield, Return] :
    try Block[?Yield, ?Return] Catch[?Yield, ?Return]
    try Block[?Yield, ?Return] Finally[?Yield, ?Return]
    try Block[?Yield, ?Return] Catch[?Yield, ?Return] Finally[?Yield, ?Return]

Catch[Yield, Return] :
    catch ( CatchParameter[?Yield] ) Block[?Yield, ?Return]

Finally[Yield, Return] :
    finally Block[?Yield, ?Return]

CatchParameter[Yield] :
    BindingIdentifier[?Yield]
    BindingPattern[?Yield]

/*
 * 13.16 The debugger statement
 */

DebuggerStatement :
    debugger ; 

/*
 * 14 ECMAScript Language: Functions and Classes
 */

/*
 * 14.1 Function Definitions
 */

FunctionDeclaration[Yield, Default] :
    function BindingIdentifier[?Yield] ( FormalParameters ) { FunctionBody }
    [+Default] function ( FormalParameters ) { FunctionBody }

FunctionExpression :
    function BindingIdentifier[opt] ( FormalParameters ) { FunctionBody }

StrictFormalParameters[Yield] :
    FormalParameters[?Yield] 

FormalParameters[Yield] :
    [empty]
    FormalParameterList[?Yield]

FormalParameterList[Yield] :
    FunctionRestParameter[?Yield]
    FormalsList[?Yield]
    FormalsList[?Yield], FunctionRestParameter[?Yield]

FormalsList[Yield] :
    FormalParameter[?Yield]
    FormalsList[?Yield] , FormalParameter[?Yield]

FunctionRestParameter[Yield] :
    BindingRestElement[?Yield]

FormalParameter[Yield] :
    BindingElement[?Yield]

FunctionBody[Yield] :
    FunctionStatementList[?Yield]

FunctionStatementList[Yield] :
    StatementList[?Yield, Return][opt]

/*
 * 14.2 Arrow Function Definitions
 */

ArrowFunction[In, Yield] :
 ArrowParameters[?Yield] [no LineTerminator here] => ConciseBody[?In]

ArrowParameters[Yield] :
    BindingIdentifier[?Yield]
    CoverParenthesizedExpressionAndArrowParameterList[?Yield] [reparse using ArrowFormalParameters[?Yield]]

ConciseBody[In] :
    [lookahead not {] AssignmentExpression[?In]
    { FunctionBody } 

ArrowFormalParameters[Yield] :
    ( StrictFormalParameters[?Yield] ) 

/*
 * 14.3 Method Definitions
 */

MethodDefinition[Yield] :
    PropertyName[?Yield] ( StrictFormalParameters ) { FunctionBody }
    GeneratorMethod[?Yield]
    get PropertyName[?Yield] ( ) { FunctionBody }
    set PropertyName[?Yield] ( PropertySetParameterList ) { FunctionBody }

PropertySetParameterList :
    FormalParameter 

/*
 * 14.4 Generator Function Definitions
 */

GeneratorMethod[Yield] :
    * PropertyName[?Yield] (StrictFormalParameters[Yield] ) { GeneratorBody } 

GeneratorDeclaration[Yield, Default] :
    function * BindingIdentifier[?Yield] ( FormalParameters[Yield] ) { GeneratorBody }
    [+Default] function * ( FormalParameters[Yield] ) { GeneratorBody }

GeneratorExpression :
    function * BindingIdentifier[Yield][opt] ( FormalParameters[Yield] ) { GeneratorBody }

GeneratorBody :
    FunctionBody[Yield]

YieldExpression[In] :
    yield
    yield [no LineTerminator here] AssignmentExpression[?In, Yield]
    yield [no LineTerminator here] * AssignmentExpression[?In, Yield]

/*
 * 14.5 Class Definitions
 */

ClassDeclaration[Yield, Default] :
    class BindingIdentifier[?Yield] ClassTail[?Yield]
    [+Default] class ClassTail[?Yield]

ClassExpression[Yield] :
    class BindingIdentifier[?Yield][opt] ClassTail[?Yield]

ClassTail[Yield] :
    ClassHeritage[?Yield][opt] { ClassBody[?Yield][opt] }

ClassHeritage[Yield] :
    extends LeftHandSideExpression[?Yield]

ClassBody[Yield] :
    ClassElementList[?Yield]

ClassElementList[Yield] :
    ClassElement[?Yield]
    ClassElementList[?Yield] ClassElement[?Yield]

ClassElement[Yield] :
    MethodDefinition[?Yield]
    static MethodDefinition[?Yield]
    ; 

/*
 * 15 ECMAScript Language: Scripts and Modules
 */

/*
 * 15.1 Scripts
 */

Script :
    ScriptBody[opt]

ScriptBody :
    StatementList 
    
/*
 * 15.2 Modules
 */

Module :
    ModuleBody[opt]

ModuleBody :
    ModuleItemList

ModuleItemList :
    ModuleItem
    ModuleItemList ModuleItem

ModuleItem :
    ImportDeclaration
    ExportDeclaration
    StatementListItem 

/* 
 * 15.2.2 Imports
 */

ImportDeclaration :
    import ImportClause FromClause ;
    import ModuleSpecifier ;

ImportClause :
    ImportedDefaultBinding
    NameSpaceImport
    NamedImports
    ImportedDefaultBinding , NameSpaceImport
    ImportedDefaultBinding , NamedImports

ImportedDefaultBinding :
    ImportedBinding

NameSpaceImport :
    * as ImportedBinding

NamedImports :
    { }
    { ImportsList }
    { ImportsList , }

FromClause :
    from ModuleSpecifier

ImportsList :
    ImportSpecifier
    ImportsList , ImportSpecifier

ImportSpecifier :
    ImportedBinding
    IdentifierName as ImportedBinding

ModuleSpecifier :
    StringLiteral
    
ImportedBinding :
    BindingIdentifier 

/*
 * 15.2.3 Exports
 */

ExportDeclaration :
    export * FromClause ;
    export ExportClause FromClause ;
    export ExportClause ;
    export VariableStatement
    export Declaration
    export default HoistableDeclaration[Default]
    export default ClassDeclaration[Default]
    export default [lookahead not in { function, class }] AssignmentExpression[In] ;

ExportClause :
    { }
    { ExportsList }
    { ExportsList , } 

ExportsList :
    ExportSpecifier
    ExportsList , ExportSpecifier

ExportSpecifier :
    IdentifierName
    IdentifierName as IdentifierName 
